name: deploy-dp
description: Deploy a Kong Data Plane to Kubernetes using Helm, with secrets from Vault
inputs:
  kong-image-repo:
    description: Kong image repository (e.g., kong/kong-gateway)
    required: true
  kong-image-tag:
    description: Kong image tag (e.g., 3.8)
    required: true
  team-name:
    description: Name of the Konnect Team to onboard the Data Plane to
    required: true
  environment:
    description: Deployment environment (e.g., dev, staging, prod)
    required: false
    default: dev
runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: latest

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: latest

    - name: Set up env variables
      shell: bash
      run: |
        echo "NAMESPACE=kong-${{ inputs.team-name}}-${{ inputs.environment }}" >> $GITHUB_ENV
        echo "KUBECONFIG=/.kube/config" >> $GITHUB_ENV

    - name: Import Secrets
      id: import-secrets
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ env.VAULT_ADDR }}
        token: ${{ env.VAULT_TOKEN }}
        secrets: |
          ${{ inputs.team-name }}-kv/data/control-planes/${{ inputs.team-name }}-${{ inputs.environment }} clustering_cert | CLUSTERING_CERT ;
          ${{ inputs.team-name }}-kv/data/control-planes/${{ inputs.team-name }}-${{ inputs.environment }} clustering_cert_key | CLUSTERING_CERT_KEY ;
          ${{ inputs.team-name }}-kv/data/control-planes/${{ inputs.team-name }}-${{ inputs.environment }} control_plane_endpoint | CP_ENDPOINT ;
          ${{ inputs.team-name }}-kv/data/control-planes/${{ inputs.team-name }}-${{ inputs.environment }} telemetry_endpoint | TELEMETRY_ENDPOINT ;
          ${{ inputs.team-name }}-kv/data/control-planes/${{ inputs.team-name }}-${{ inputs.environment }} name | CP_NAME ;
          ${{ inputs.team-name }}-kv/data/control-planes/${{ inputs.team-name }}-${{ inputs.environment }} id | CP_ID ;

    - name: debug info
      shell: bash
      run: |
        echo "CLUSTERING_CERT: ${CLUSTERING_CERT:+[set]}"
        echo "CLUSTERING_CERT_KEY: ${CLUSTERING_CERT_KEY:+[set]}"
        echo "CP_ENDPOINT: $CP_ENDPOINT"
        echo "TELEMETRY_ENDPOINT: $TELEMETRY_ENDPOINT"
        echo "CP_NAME: $CP_NAME"
        echo "CP_ID: $CP_ID"

    - name: kubectl use context
      shell: bash
      run: kubectl config use-context orbstack

    - name: Add Kong Helm Repository
      shell: bash
      run: |
        helm repo add kong https://charts.konghq.com
        helm repo update

    - name: Create Kong namespace if not exists
      shell: bash
      run: |
        kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Kong clustering secrets if required
      shell: bash
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: kong-cluster-cert
          namespace: $NAMESPACE
        type: kubernetes.io/tls
        data:
          tls.crt: $(echo "$CLUSTERING_CERT" | base64 -w 0)
          tls.key: $(echo "$CLUSTERING_CERT_KEY" | base64 -w 0)
        EOF

    - name: Deploy Kong Data Plane
      shell: bash
      run: |
        # Extract control plane and telemetry endpoints from the control plane info
        CONTROL_PLANE_ENDPOINT=$(echo "$CP_ENDPOINT" | sed 's|https://||')
        TELEMETRY_ENDPOINT=$(echo "$TELEMETRY_ENDPOINT" | sed 's|https://||')
        CONTROL_PLANE_NAME=$(echo "$CP_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[ _]/-/g')

        echo "Control Plane Endpoint: $CONTROL_PLANE_ENDPOINT"
        echo "Telemetry Endpoint: $TELEMETRY_ENDPOINT"
        echo "Control Plane Name: $CONTROL_PLANE_NAME"

        # Verify all required inputs are set
        if [ "$CONTROL_PLANE_ENDPOINT" = "null" ] || [ "$TELEMETRY_ENDPOINT" = "null" ]; then
          echo "Missing required input(s)"
          echo "Control Plane Endpoint: $CONTROL_PLANE_ENDPOINT"
          echo "Telemetry Endpoint: $TELEMETRY_ENDPOINT"
          exit 1
        fi

        # Setup Data Plane node
        helm upgrade --install dp kong/kong \
          -n "$NAMESPACE" \
          --values "${{ github.action_path }}/k8s/kong-dp/values.yaml" \
          --set env.image.repository=${{ inputs.kong-image-repo }} \
          --set env.image.tag=${{ inputs.kong-image-tag }} \
          --set replicaCount="1" \
          --set env.cluster_control_plane=$CONTROL_PLANE_ENDPOINT:443 \
          --set env.cluster_server_name=$CONTROL_PLANE_ENDPOINT \
          --set env.cluster_telemetry_endpoint=$TELEMETRY_ENDPOINT:443 \
          --set env.cluster_telemetry_server_name=$TELEMETRY_ENDPOINT \
          --set env.cluster_cert=/etc/secrets/kong-cluster-cert/tls.crt \
          --set env.cluster_cert_key=/etc/secrets/kong-cluster-cert/tls.key
