name: 'Konnect Resources'
description: 'Provision or destroy Konnect resources'
inputs:
  config:
    description: 'Path to the provisioning config file'
    required: true
  action:
    description: 'Action to perform'
    required: true
    default: 'provision'
  vault_address:
    description: 'Vault address'
    required: false
    default: 'http://localhost:8300'
  vault_token:
    description: 'Vault token'
    required: true
  s3_access_key:
    description: 'S3 access key'
    required: true
  s3_secret_key:
    description: 'S3 secret key'
    required: true
  konnect_region:
    description: "Konnect region"
    required: false
    default: "eu"

runs:
  using: 'composite'
  steps:
    - name: Install MinIO Client
      shell: bash
      run: |
        if [ -f "/mc-cache/mc" ]; then
          echo "Using cached MinIO Client"
          cp /mc-cache/mc /usr/local/bin/mc
        else
          echo "Downloading MinIO Client"
          wget -v https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc
        fi
        chmod +x /usr/local/bin/mc
        echo "MinIO Client installed successfully"

    - name: Install vault cli
      uses: eLco/setup-vault@v1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'

    - name: Validate config
      run: |
        config_content=$(cat ${{ inputs.config }} | yq -r .)
        
        # Validate metadata.type
        metadata_type=$(echo "$config_content" | yq -r '.metadata.type')
        if [ "$metadata_type" != "konnect.team.resources" ]; then
          echo "Invalid metadata.type: $metadata_type. Expected 'konnect.team.resources'"
          exit 1
        fi

        # Validate metadata.team is required
        metadata_team=$(echo "$config_content" | yq -r '.metadata.team')
        if [ -z "$metadata_team" ]; then
          echo "metadata.team is required"
          exit 1
        fi

        # Validate resources is an array
        resources_type=$(echo "$config_content" | yq -r '.resources | type')
        if [ "$resources_type" != "!!seq" ]; then
          echo "Invalid resources type: $resources_type. Expected '!!seq' (array)"
          exit 1
        fi

        allowed_types=(
          "konnect.control_plane"
          "konnect.api_product"
          "konnect.api"
          "konnect.api_document"
          "konnect.api_specification"
          "konnect.api_implementation"
          "konnect.api_publication"
          "konnect.cloud_gateway_network"
          "konnect.cloud_gateway_configuration"
          "konnect.application_auth_strategy"
          "konnect.developer_portal"
          "konnect.portal_auth"
          "konnect.portal_custom_domain"
          "konnect.portal_team"
          "konnect.portal_customization"
          "konnect.portal_page"
          "konnect.portal_snippet"
        )
        invalid_resources=""
        
        for rtype in $(echo "$config_content" | yq -r '.resources[].type'); do
          if ! printf '%s\n' "${allowed_types[@]}" | grep -qx "$rtype"; then
            invalid_resources+="$rtype\n"
          fi
        done
        
        if [ -n "$invalid_resources" ]; then
          echo "Invalid resource types found:"
          echo -e "$invalid_resources"
          echo "Expected one of: ${allowed_types[*]}"
          exit 1
        fi

        echo "Config validation passed"
      shell: bash

    - name: Extract team name from git repo
      run: |
        REPO_NAME=$(basename $(git rev-parse --show-toplevel))
        TEAM_NAME="${REPO_NAME#team-}"
        TEAM_NAME="${TEAM_NAME%-repo}"
        TEAM_NAME_NORMALIZED=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
        
        echo "TEAM_NAME=$TEAM_NAME" >> $GITHUB_ENV
        echo "TEAM_NAME_NORMALIZED=$TEAM_NAME_NORMALIZED" >> $GITHUB_ENV
      shell: bash

    - name: Set resource variables from config file
      shell: bash
      run: |
        config_content=$(cat ${{ inputs.config }} | yq -r .)
        RESOURCE_TYPE=$(echo "$config_content" | yq -r '.metadata.type')
        TERRAFORM_DIR=${{ github.action_path }}/terraform

        echo "RESOURCE_TYPE=$RESOURCE_TYPE" >> $GITHUB_ENV
        echo "TERRAFORM_DIR=$TERRAFORM_DIR" >> $GITHUB_ENV
        echo "VAULT_ADDR=${{ inputs.vault_address }}" >> $GITHUB_ENV
        echo "VAULT_TOKEN=${{ inputs.vault_token }}" >> $GITHUB_ENV
        
        echo "TF_VAR_config_file=${{ inputs.config }}" >> $GITHUB_ENV
        echo "TF_VAR_konnect_server_url=https://${{ inputs.konnect_region }}.api.konghq.com" >> $GITHUB_ENV

    - name: Import Secrets from Vault
      id: import-secrets
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ inputs.vault_address }}
        token: ${{ inputs.vault_token }}
        secrets: |
          ${{ env.TEAM_NAME_NORMALIZED }}-kv/data/system-accounts/sa-${{ env.TEAM_NAME_NORMALIZED }} token | SYSTEM_ACCOUNT_TOKEN ;

    - name: Fetch team information
      id: fetch-team
      run: |
        # Make a request to the Konnect API to fetch required team information
        # This is a GET request to https://global.api.konghq.com/v3/teams with a filter on the team name.
        url_encoded_control_team_name=$(echo -n "$TEAM_NAME" | jq -s -R -r @uri)
        response=$(curl -Gs -d "filter[name][eq]=${url_encoded_control_team_name}" -w "%{http_code}" "https://global.api.konghq.com/v3/teams" -H "Authorization: Bearer ${{ env.SYSTEM_ACCOUNT_TOKEN }}" -H "Content-Type: application/json")
        http_code=${response: -3}
        response_body=${response:0:-3}

        # Check the response code
        if [ "$http_code" -ne 200 ]; then
          echo "Request failed with status code $http_code"
          echo "Response body: $response_body"
          exit 1
        fi

        echo "Request succeeded with status code $http_code"

        # Ensure only one team is returned in the response.
        if [ $(echo "$response_body" | jq -r '.data | length') -ne 1 ]; then
          echo "Expected one team to be returned, got $(echo "$response_body" | jq -r '.data | length')"
          echo "Response body: $response_body"
          exit 1
        fi

        # Save the team info to an output variable
        echo "::set-output name=team::$( echo $response_body | jq -c .data[0])"
      shell: bash

    - name: Create S3 bucket if required
      if: ${{ inputs.action == 'provision' }}
      shell: bash
      run: |
        ./create-minio-bucket.sh konnect $RESOURCE_TYPE.$TEAM_NAME_NORMALIZED
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.s3_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.s3_secret_key }}
      working-directory: ${{ github.action_path }}/scripts

    - name: Terraform Init
      shell: bash
      run: |
        terraform init -upgrade \
          -backend-config=config.s3.tfbackend \
          -backend-config="bucket=$RESOURCE_TYPE.$TEAM_NAME_NORMALIZED" \
          -backend-config="key=tfstate" \
          -backend-config="region=main" \
          -backend-config="access_key=${{ inputs.s3_access_key }}" \
          -backend-config="secret_key=${{ inputs.s3_secret_key }}"
      env:
        TF_VAR_team: ${{ steps.fetch-team.outputs.team }}
        TF_VAR_konnect_access_token: ${{ env.SYSTEM_ACCOUNT_TOKEN }}
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform Plan
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      run: |
        terraform plan -out=tfplan
      env:
        TF_VAR_team: ${{ steps.fetch-team.outputs.team }}
        TF_VAR_konnect_access_token: ${{ env.SYSTEM_ACCOUNT_TOKEN }}
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform Apply
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      id: tfapply
      run: |
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_team: ${{ steps.fetch-team.outputs.team }}
        TF_VAR_konnect_access_token: ${{ env.SYSTEM_ACCOUNT_TOKEN }}
      working-directory: ${{env.TERRAFORM_DIR}}

    - name: Terraform destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      run: |
        terraform destroy -auto-approve
      env:
        TF_VAR_team: ${{ steps.fetch-team.outputs.team }}
        TF_VAR_konnect_access_token: ${{ env.SYSTEM_ACCOUNT_TOKEN }}
      working-directory: ${{env.TERRAFORM_DIR}}
