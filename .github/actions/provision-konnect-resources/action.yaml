name: 'Konnect Resources'
description: 'Provision or destroy Konnect resources'
inputs:
  konnect-resources:
    description: 'Path to the provisioning config file'
    required: true
  action:
    description: 'Action to perform'
    required: true
    default: 'provision'
  plan-only:
    description: 'If true, only run terraform plan (no apply)'
    required: false
    default: 'false'
  vault-address:
    description: 'Vault address'
    required: false
    default: 'http://localhost:8300'
  vault-token:
    description: 'Vault token'
    required: true
  aws-endpoint-url:
    description: 'S3 endpoint URL'
    required: false
  aws-access-key-id:
    description: 'S3 access key'
    required: true
  aws-secret-access-key:
    description: 'S3 secret key'
    required: true
  aws-session-token:
    description: 'S3 session token'
    required: false
  aws-region:
    description: 'AWS region for S3'
    required: false
    default: 'eu-central-1'
  konnect-region:
    description: "Konnect region"
    required: false
    default: "eu"
  konnect-server-url:
    description: 'Konnect server URL (defaults to global endpoint)'
    required: false
    default: 'https://eu.api.konghq.com'
  konnect-token:
    description: 'Konnect API token'
    required: true
  konnect-team-name:
    description: 'Team name to provision resources for'
    required: true

runs:
  using: 'composite'
  steps:

    - name: Install yq (for YAML validation)
      shell: bash
      run: |
        set -euo pipefail
        if ! command -v yq >/dev/null 2>&1; then
          UNAME=$(uname -s)
          case "$UNAME" in
            Linux*)  BINARY="yq_linux_amd64" ;;
            Darwin*) BINARY="yq_darwin_amd64" ;;
            *) echo "Unsupported OS: $UNAME" >&2; exit 1 ;;
          esac
          curl -fsSL "https://github.com/mikefarah/yq/releases/latest/download/${BINARY}" -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'

    - name: Validate config
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/validate-config.sh "${{ inputs.konnect-resources }}"

    - name: Setup Terraform Environment
      shell: bash
      run: |

        # Set Vault environment variables
        echo "VAULT_ADDR=${{ inputs.vault-address }}" >> $GITHUB_ENV
        echo "VAULT_TOKEN=${{ inputs.vault-token }}" >> $GITHUB_ENV

        # Set AWS environment variables
        # TODO: is endpoint-url needed?
        echo "AWS_ENDPOINT_URL=${{ inputs.aws-endpoint-url }}" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=${{ inputs.aws-session-token }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ inputs.aws-region }}" >> $GITHUB_ENV

        # Set Konnect environment variables
        echo "TF_VAR_konnect_server_url=${{ inputs.konnect-server-url }}" >> $GITHUB_ENV
        echo "TF_VAR_konnect_access_token=${{ inputs.konnect-token }}" >> $GITHUB_ENV
        echo "TF_VAR_konnect_region=${{ inputs.konnect-region }}" >> $GITHUB_ENV

        # Set other Terraform variables
        echo "TF_VAR_config_file=${{ inputs.konnect-resources }}" >> $GITHUB_ENV
        echo "TF_VAR_gh_workspace_path=${{ github.workspace }}" >> $GITHUB_ENV
        echo "TF_VAR_team_name=${{ inputs.konnect-team-name }}" >> $GITHUB_ENV

    - name: Terraform Init
      shell: bash
      run: |
        terraform init -input=false -upgrade \
        -backend-config=config.s3.tfbackend \
        -backend-config="bucket=kw.konnect.team.resources.${{ inputs.konnect-team-name }}" \
        -backend-config="region=${{ inputs.aws-region }}" \
      working-directory: ${{ github.action_path }}/terraform

    - name: Terraform Plan
      shell: bash
      if: ${{ inputs.action != 'destroy' }}
      run: |
        set -euo pipefail
        REFRESH=true
        if [ "${{ inputs.konnect-token }}" = "dummy" ]; then
          REFRESH=false
        fi
        terraform plan -refresh=$REFRESH -input=false -lock=false -out=tfplan || true
      working-directory: ${{ github.action_path }}/terraform

    - name: Terraform Apply
      shell: bash
      if: ${{ inputs.action == 'provision' && inputs.plan-only != 'true' }}
      id: tfapply
      run: |
        terraform apply -input=false -auto-approve tfplan
      working-directory: ${{ github.action_path }}/terraform

    - name: Terraform destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      run: |
        terraform destroy -auto-approve
      working-directory: ${{ github.action_path }}/terraform
