name: 'Konnect Resources'
description: 'Provision or destroy Konnect resources'
inputs:
  config:
    description: 'Path to the provisioning config file'
    required: true
  action:
    description: 'Action to perform'
    required: true
    default: 'provision'
  vault_address:
    description: 'Vault address'
    required: false
    default: 'http://localhost:8300'
  vault_token:
    description: 'Vault token'
    required: true
  s3_endpoint_url:
    description: 'S3 endpoint URL'
    required: true
    default: 'http://localhost:9000'
  s3_access_key:
    description: 'S3 access key'
    required: true
  s3_secret_key:
    description: 'S3 secret key'
    required: true
  konnect_region:
    description: "Konnect region"
    required: false
    default: "eu"
  konnect_token:
    description: 'Konnect API token'
    required: true
  konnect_team_name:
    description: 'Team name to provision resources for'
    required: true

runs:
  using: 'composite'
  steps:

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'

    - name: Validate config
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/validate-config.sh "${{ inputs.config }}"

    - name: Setup Terraform Environment
      shell: bash
      run: |
        echo "VAULT_ADDR=${{ inputs.vault_address }}" >> $GITHUB_ENV
        echo "VAULT_TOKEN=${{ inputs.vault_token }}" >> $GITHUB_ENV
        echo "AWS_ENDPOINT_URL=${{ inputs.s3_endpoint_url }}" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=${{ inputs.s3_access_key }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.s3_secret_key }}" >> $GITHUB_ENV
        echo "TF_VAR_team=${{ steps.fetch-team.outputs.team }}" >> $GITHUB_ENV
        echo "TF_VAR_konnect_access_token=${{ inputs.konnect_token }}" >> $GITHUB_ENV
        echo "TF_VAR_config_file=${{ inputs.config }}" >> $GITHUB_ENV
        echo "TF_VAR_konnect_server_url=https://${{ inputs.konnect_region }}.api.konghq.com" >> $GITHUB_ENV

    - name: Fetch team information
      id: fetch-team
      run: |
        # Make a request to the Konnect API to fetch required team information
        # This is a GET request to https://global.api.konghq.com/v3/teams with a filter on the team name.
        url_encoded_control_team_name=$(echo -n "${{ inputs.konnect_team_name }}" | jq -s -R -r @uri)
        response=$(curl -Gs -d "filter[name][eq]=${url_encoded_control_team_name}" -w "%{http_code}" "https://global.api.konghq.com/v3/teams" -H "Authorization: Bearer ${{ inputs.konnect_token }}" -H "Content-Type: application/json")
        http_code=${response: -3}
        response_body=${response:0:-3}

        # Check the response code
        if [ "$http_code" -ne 200 ]; then
          echo "Request failed with status code $http_code"
          echo "Response body: $response_body"
          exit 1
        fi

        echo "Request succeeded with status code $http_code"

        # Ensure only one team is returned in the response.
        if [ $(echo "$response_body" | jq -r '.data | length') -ne 1 ]; then
          echo "Expected one team to be returned, got $(echo "$response_body" | jq -r '.data | length')"
          echo "Response body: $response_body"
          exit 1
        fi

        # Save the team info to an output variable
        echo "::set-output name=team::$( echo $response_body | jq -c .data[0])"
      shell: bash

    - name: Terraform Init
      shell: bash
      run: |
        terraform init -upgrade \
          -backend-config=config.s3.tfbackend \
          -backend-config="bucket=konnect.team.resources.${{ inputs.konnect_team_name }}" \
          -backend-config="key=tfstate" \
          -backend-config="region=main" \
          -backend-config="access_key=${{ inputs.s3_access_key }}" \
          -backend-config="secret_key=${{ inputs.s3_secret_key }}"
      working-directory: ${{ github.action_path }}/terraform

    - name: Terraform Plan
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      run: |
        terraform plan -out=tfplan
      working-directory: ${{ github.action_path }}/terraform

    - name: Terraform Apply
      shell: bash
      if: ${{ inputs.action == 'provision' }}
      id: tfapply
      run: |
        terraform apply -auto-approve tfplan
      working-directory: ${{ github.action_path }}/terraform

    - name: Terraform destroy
      shell: bash
      if: ${{ inputs.action == 'destroy' }}
      run: |
        terraform destroy -auto-approve
      working-directory: ${{ github.action_path }}/terraform
