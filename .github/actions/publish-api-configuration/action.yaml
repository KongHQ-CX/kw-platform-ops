name: Publish API configuration
description: "Publish API configuration to Kong Konnect"

inputs:
  openapi_spec:
    description: "Path to the OpenAPI Specification file"
    required: true
  control_plane_name:
    description: "Kong Konnect control plane name"
    required: true
  system_account_token:
    description: "Kong Konnect System Account Token"
    required: true
  api_team_plugins_path:
    description: "Path to the directory containing the plugins owned by the API team/repo"
    required: false
    default: ""
  konnect_server_url:
    description: "Kong Konnect Server URL"
    required: false
    default: "https://eu.api.konghq.com"

runs:
  using: 'composite'
  steps:
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install deck CLI
      shell: bash
      run: |
        curl -sL https://github.com/Kong/deck/releases/download/v1.51.0/deck_1.51.0_linux_amd64.tar.gz | tar xz
        sudo mv deck /usr/local/bin/
        deck version

    - name: Install extra rulesets for Spectral
      shell: bash
      run: |
        cd ${{ github.action_path }}/spectral
        npm install @stoplight/spectral-owasp-ruleset@^2.0

    - name: Set current date as env variable
      shell: bash
      run: echo "NOW=$(date +'%Y_%m_%dT%H_%M_%S')" >> $GITHUB_ENV

    - name: Setup decK variables
      shell: bash
      run: |
        
        # Set the variable DECK_CONFIG_API_SPEC with the content of the OpenAPI spec.
        # The spec is a YAML file, the spec needs to be URI-Encoded to preserve the YAML format.
        api_spec_content=$(cat ${{ github.workspace }}/${{ inputs.openapi_spec }} | jq -sRr @uri)
        echo "DECK_CONFIG_API_SPEC=$api_spec_content" >> $GITHUB_ENV

        # Set the API Name
        api_name=$(yq eval '.info.title' ${{ github.workspace }}/${{ inputs.openapi_spec }} | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
        echo "DECK_API_NAME=$api_name" >> $GITHUB_ENV

        # Set the Organization/BU
        organization=$(yq eval '.info.x-business-unit' ${{ github.workspace }}/${{ inputs.openapi_spec }})
        echo "DECK_ORGANIZATION=$organization" >> $GITHUB_ENV

        # Set the team responsible for the API
        team=$(yq eval '.info.x-team-name' ${{ github.workspace }}/${{ inputs.openapi_spec }})
        echo "DECK_CONFIG_OWNER=$team" >> $GITHUB_ENV

        # Set the namespace if available
        namespace=$(yq eval '.["x-kong-namespace"]' ${{ github.workspace }}/${{ inputs.openapi_spec }})
        if [ ! -z "$namespace" ]; then
          echo "DECK_NAMESPACE=$namespace" >> $GITHUB_ENV
        fi

    ####################################
    # Enforce API Guidelines by linting the OpenAPI Specification
    ####################################
    - name: Lint OpenAPI Specification
      shell: bash
      run: |
        npx @stoplight/spectral-cli lint '${{ github.workspace }}/${{ inputs.openapi_spec }}' --ruleset '${{ github.action_path }}/spectral/.spectral.yaml'

    - name: Convert OpenAPI Specification to Kong Gateway configuration
      shell: bash
      run: cat ${{ github.workspace }}/${{ inputs.openapi_spec }} | deck file openapi2kong > kong.yaml

    ####################################
    # Customize the Kong Gateway configuration by adding plugins defined by the API team/repo
    ####################################
    - name: Add plugins owned by the repository that calls this composite action
      shell: bash
      if: ${{ inputs.custom_plugins_path != '' }}
      run: |
        if [ -d "${{ github.workspace }}/${{ inputs.custom_plugins_path }}" ]; then
          for plugin_file in ${{ github.workspace }}/${{ inputs.custom_plugins_path }}/*.yaml; do
            if [ -f "$plugin_file" ]; then
              cat kong.yaml | deck file add-plugins "$plugin_file" -o kong.yaml
            fi
          done
        fi
      working-directory: ${{ github.workspace }}
    
    #####################################
    # Ensure the API team/repo only uses allowed plugins following the governance rules
    #####################################
    - name: Ensure API team follows kong configuation governance rules
      shell: bash
      run: |
        cat kong.yaml | deck file lint ${{ github.action_path }}/kong-lint/kong.ruleset.yaml
      working-directory: ${{ github.workspace }}
      
    #####################################
    # Finalize the Kong Gateway configuration by adding platform owned plugins and other configuration
    #####################################
    - name: Add plugins owned by platform to Kong Gateway configuration
      shell: bash
      run: |
        cat kong.yaml | deck file add-plugins \
          ${{ github.action_path }}/plugins/openid-connect.yaml \
          ${{ github.action_path }}/plugins/oas-validation.yaml \
          ${{ github.action_path }}/plugins/rate-limiting.yaml -o kong.yaml
      working-directory: ${{ github.workspace }}

    - name: Add namespace to Kong Gateway configuration if required
      shell: bash
      if: ${{ env.DECK_NAMESPACE && env.DECK_NAMESPACE != '/' && env.DECK_NAMESPACE != 'null' }}
      run: cat kong.yaml | deck file namespace --path-prefix=${{ env.DECK_NAMESPACE }} -o kong.yaml
      working-directory: ${{ github.workspace }}

    #####################################
    # Add metadata tags to the Kong Gateway configuration to facilitate filtering in Konnect
    #####################################
    - name: Add select_tags patch to Kong Gateway configuration
      shell: bash
      run: cat kong.yaml | deck file patch ${{ github.action_path }}/patches/select_tags.yaml -o kong.yaml
      working-directory: ${{ github.workspace }}

    - name: Output Kong Gateway configuration
      shell: bash
      run: cat kong.yaml
      working-directory: ${{ github.workspace }}

    - name: Validate Generated Kong Gateway configuration
      shell: bash
      run: deck file validate kong.yaml
      working-directory: ${{ github.workspace }}

    - name: Get a backup of the previous Kong Gateway configuration
      shell: bash
      run: |
        deck gateway dump \
          --konnect-addr="${{ inputs.konnect_server_url }}" \
          --konnect-token="${{ inputs.system_account_token }}" \
          --konnect-control-plane-name="${{ inputs.control_plane_name }}" -o kong_backup_${{ env.NOW }}.yaml
      working-directory: ${{ github.workspace }}

    - name: Diff Kong Gateway configuration
      shell: bash
      run: |
        deck gateway diff kong.yaml  \
          --konnect-addr="${{ inputs.konnect_server_url }}" \
          --konnect-token="${{ inputs.system_account_token }}" \
          --konnect-control-plane-name="${{ inputs.control_plane_name }}" > kong_diff_${{ env.NOW }}.txt
          # Show diff output
        cat kong_diff_${{ env.NOW }}.txt
      working-directory: ${{ github.workspace }}

    - name: Sync Kong Gateway configuration
      shell: bash
      run: |
        deck gateway sync kong.yaml  \
          --konnect-addr="${{ inputs.konnect_server_url }}" \
          --konnect-token="${{ inputs.system_account_token }}" \
          --konnect-control-plane-name="${{ inputs.control_plane_name }}"
      working-directory: ${{ github.workspace }}

    - name: Get a backup of the current Kong Gateway configuration
      shell: bash
      run: |
        deck gateway dump \
          --konnect-addr="${{ inputs.konnect_server_url }}" \
          --konnect-token="${{ inputs.system_account_token }}" \
          --konnect-control-plane-name="${{ inputs.control_plane_name }}" -o kong_current_${{ env.NOW }}.yaml
      working-directory: ${{ github.workspace }}

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts
        path: |
          ${{ github.workspace }}/kong_backup_${{ env.NOW }}.yaml
          ${{ github.workspace }}/kong_current_${{ env.NOW }}.yaml
          ${{ github.workspace }}/kong_diff_${{ env.NOW }}.txt