name: Onboard Konnect Teams

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feat/per-team-sor
    paths:
      # - "teams/resources.yaml"
      - "teams/*.yaml"

env:
  TF_VAR_resources_path: ${{ github.workspace }}/teams
  TERRAFORM_DIR: ${{ github.workspace }}/terraform/konnect-teams

jobs:
  onboard-konnect-teams:
    runs-on: ubuntu-latest
    env:
      # Konnect related variables
      # Used for configuring TF Konnect provider
      KONNECT_SERVER_URL: ${{ vars.KONNECT_SERVER_URL }}
      KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}

      # Hashicorp Vault related variables
      # Used for configuring TF Vault provider
      VAULT_ADDR: ${{ vars.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

      # Terraform state S3 bucket
      AWS_S3_BUCKET: "kw.konnect.teams"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest"

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Validate config
        run: |
          # Find all YAML files in the config directory
          yaml_files=$(find ${{ env.TF_VAR_resources_path }} -name "*.yaml" -o -name "*.yml")
          
          if [ -z "$yaml_files" ]; then
            echo "No YAML files found in ${{ env.TF_VAR_resources_path }}"
            exit 1
          fi
          
          echo "Found YAML files to validate:"
          echo "$yaml_files"
          echo ""
          
          # Validate each YAML file
          for config_file in $yaml_files; do
            echo "Validating $config_file..."
            config=$( cat "$config_file" | yq -r . )

            # Every resource must have a name and the name must be lowercase alphanumeric with hyphens
            resource_name=$(echo "$config" | yq -r '.name // empty')
            if [ -z "$resource_name" ]; then
              echo "Missing name in $config_file"
              exit 1
            fi
            
            if echo "$resource_name" | grep -qE '[^a-z0-9-]'; then
              echo "Invalid resource name in $config_file: $resource_name. Names must be lowercase alphanumeric with hyphens."
              exit 1
            fi

            # Every resource must have an "entitlements" property that is a list
            entitlements_type=$(echo "$config" | yq -r '.entitlements | type // empty')
            if [ "$entitlements_type" != "array" ]; then
              echo "Invalid entitlements in $config_file. Entitlements must be a list."
              exit 1
            fi

            # Entitlements should be one of konnect.control_plane or konnect.api
            invalid_entitlements=$(echo "$config" | yq -r '.entitlements[]' | grep -v -E '^(konnect\.control_plane|konnect\.api)$' || true)
            if [ -n "$invalid_entitlements" ]; then
              echo "Invalid entitlements found in $config_file: $invalid_entitlements. Entitlements must be one of konnect.control_plane or konnect.api."
              exit 1
            fi

            echo "âœ“ $config_file validation passed"
          done

          echo ""
          echo "All config files validation passed"
        shell: bash

      - name: Ensure TF state S3 bucket exists
        shell: bash
        run: |
          ./create-s3-bucket.sh ${{ env.AWS_S3_BUCKET }}
        working-directory: ${{ github.workspace }}/scripts

      - name: Terraform Init
        shell: bash
        run: |
          terraform init -upgrade \
            -backend-config=config.s3.tfbackend \
            -backend-config="bucket=${{ env.AWS_S3_BUCKET }}" \
            -backend-config="key=tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Plan
        shell: bash
        run: |
          terraform plan -out=tfplan
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Apply
        shell: bash
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ${{env.TERRAFORM_DIR}}